integer(0) == 1
if (integer(0) == 1){
print("9")
}
if (integer(0) == 1){
x <- 9
}
if (2 == 1)
print("yes")
print('yes')
if (2 == 1)
print('yes')
if (1 == 1)
print('tes')
if (1 == 1)
print 'yes'
if (1 == 1)
print('yes')
pmatch("will","I will do it")
grepl("will","I will do it")
grepl("widfdll","I will do it")
v <- c("a","b","c",'d')
e <- c('b','d')
e %in% v
any(e %in% v)
v <- "abcd"
any(e %in% v)
e %in% v
v <- "a b c d "
e %in% v
c <- c(1,2)
c
c <- c(c,4)
c
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
var(mvrnorm(n=1000, rep(0, 2), Sigma))
var(mvrnorm(n=1000, rep(0, 2), Sigma, empirical = TRUE))
require(mvrnrom)
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
var(mvrnorm(n=1000, rep(0, 2), Sigma))
var(mvrnorm(n=1000, rep(0, 2), Sigma, empirical = TRUE))
library(mvrnrom)
Sigma <- matrix(c(10,3,3,2),2,2)
Sigma
var(mvrnorm(n=1000, rep(0, 2), Sigma))
var(mvrnorm(n=1000, rep(0, 2), Sigma, empirical = TRUE))
#library(mvrnrom)
#Sigma <- matrix(c(10,3,3,2),2,2)
#Sigma
#var(mvrnorm(n=1000, rep(0, 2), Sigma))
#var(mvrnorm(n=1000, rep(0, 2), Sigma, empirical = TRUE))
rbivariate <- function(mean.x = 70, sd.x=3, mean.y=162, sd.y=14, r=.50, iter=100) {
z1 <- rnorm(iter)
z2 <- rnorm(iter)
x <- sqrt(1-r^2)*sd.x*z1 + r*sd.x*z2 + mean.x
y <- sd.y*z2 + mean.y
return(list(x,y))
}
data <- rbivariate(iter=1000)
mean(data[[1]])
sd(data[[1]])
mean(data[[2]])
sd(data[[2]])
plot(data[[1]],data[[2]])
rnorm()
rnorm(10)
plot(rnorm(10))
plot(rnorm(100))
plot(rnorm(1000))
histogram(rnorm(1000))
hist(rnorm(1000))
data = rnorm(1000)
data = rnorm(1300)
datax = rnorm(1300)
datay = rnorm(1300)
plot(datax,datay)
dataframe = (datax,datay)
cor(datax,datay)
cor.test(datax,datay)
z2 <- rnorm(iter)
data = rnom()
data = rnorm()
data = rnorm(100)
data
data = data*2
data
# Transpose the observed table to demonstrate use of popsInRows=FALSE
# Makes a table of observations -- similar to first example in chisq.test
M <- as.table(rbind(c(76, 32, 46), c(48,23,47), c(45,34,78)))
dimnames(M) <- list(sex=c("Male","Female","Juv"),loc=c("Lower","Middle","Upper"))
M
# Fits chi-square test and shows summary
( chi1 <- chisq.test(M) )
# Shows post-hoc pairwise comparisons using fdr method
chisqPostHoc(chi1)
# Transpose the observed table to demonstrate use of popsInRows=FALSE
( chi2 <- chisq.test(t(M)) )
chisqPostHoc(chi2,popsInRows=FALSE)
install.packages("ncstats")
install.packages(c("BH", "bigmemory", "bigmemory.sri", "boot", "caTools", "class", "cluster", "codetools", "crqa", "deSolve", "digest", "doMC", "ergm", "ergm.count", "foreach", "foreign", "gdata", "geometry", "ggplot2", "gplots", "gtools", "igraph", "irlba", "iterators", "KernSmooth", "ks", "labeling", "latentnet", "lattice", "lme4", "maps", "MASS", "Matrix", "mgcv", "minqa", "mvtnorm", "network", "networkDynamic", "nlme", "nnet", "plyr", "RColorBrewer", "Rcpp", "reshape", "reshape2", "rgl", "robustbase", "rpart", "scales", "sna", "spam", "spatial", "statnet", "statnet.common", "survival", "tcltk2", "tergm", "trust"))
x = 3
x += 1
x =+ 1
x
x =+ 1
x
set.seed(3)
set.seed(3)
x <- seq(0,2*pi,0.1)
z <- sin(x)
y <- z + rnorm(mean=0, sd=0.5*sd(z), n=length(x))
d <- cbind.data.frame(x,y,z)
suppressMessages(library(dplyr))
library(hflights)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
suppressMessages(library(dplyr))
library(hflights)
install.packages("hflights")
suppressMessages(library(dplyr))
library(hflights)
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
# printing only shows 10 rows and as many columns as can fit on your screen
flights
flights[flights$Month==1 & flights$DayofMonth==1, ]
filter(flights, Month==1, DayofMonth==1)
filter(flights, UniqueCarrier=="AA" | UniqueCarrier=="UA")
filter(flights, UniqueCarrier %in% c("AA", "UA"))
flights[, c("DepTime", "ArrTime", "FlightNum")]
select(flights, DepTime, ArrTime, FlightNum)
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
filter(select(flights, UniqueCarrier, DepDelay), DepDelay > 60)
flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
flights[order(flights$DepDelay), c("UniqueCarrier", "DepDelay")]
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay))
desc?
?
fdfd
?desc
install.packages("wordbankr")
print("yes")
x = F
x = T
load(reshape2)
install(reshape2)
install.packages("reshape2")
library(reshape2)
tips
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
data
dat
library(ggplot2)
plot(data=dat, aes(x=time, y=total_bill, group=1)) +
geom_line() +
geom_point()
ggplot(data=dat, aes(x=time, y=total_bill, group=1)) +
geom_line() +
geom_point()
ggplot(data=dat1, aes(x=time, y=total_bill, group=sex)) +
geom_line() +
geom_point()
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
ggplot(data=dat1, aes(x=time, y=total_bill, group=sex)) +
geom_line() +
geom_point()
dat1
ggplot(data=dat1, aes(x=time, y=total_bill, group=sex, colour=sex)) +
geom_line() +
geom_point()
}
}
if x {
head(jack)
library(ggplot2)
library(ggplot2)
jack<-read.table(file.choose(), sep="\t", header=T)
dim(jack)
head(jack)
tail(jack)
full<-as.numeric(as.character(gsub("\\w+(\\d)", "\\1", jack[jack$Network=="full",]$Quad, perl=T)))*10+30
star<-as.numeric(as.character(gsub("\\w+(\\d)", "-\\1", jack[jack$Network=="star",]$Quad, perl=T)))*10-30
jack$Quad.a<-c(full, star)
head(jack)
ggplot(jack, aes(x=PriorInteractions, y=jaccardGroup, colour=Quad.a))+
geom_line()+scale_colour_gradientn(colours=c("blue", "yellow"), breaks=c(100, 30,-30, -100))+theme_bw()
jack.head()
head(jack)
ggplot(jack, aes(x=PriorInteractions, y=jaccardInternal, colour=Quad.a))+
geom_line()+scale_colour_gradientn(colours=c("blue", "yellow"), breaks=c(100, 30,-30, -100))+theme_bw()
tail(jack)
tail(jack[jack$Quad=="star7",])
tail(jack[jack$Quad=="star6",])
tail(jack[jack$Quad=="star5",])
tail(jack[jack$Quad=="star7",])
7351/3
install.packages(“lme4”)
install.packages("lme4")
library(lme4)
install.packages(c("BH", "boot", "class", "cluster", "curl", "data.table", "DBI", "digest", "foreign", "ggplot2", "gtable", "manipulate", "maps", "MASS", "Matrix", "mgcv", "munsell", "nnet", "nycflights13", "plyr", "R6", "Rcpp", "readr", "RMySQL", "scales", "spatial", "stringi", "survival"))
libraray(lme4)
library(lme4)
install.packages(“lme4”)
install.packages("lme4")
library(lme4)
politeness= read.csv("http://www.bodowinter.com/tutorial/politeness_data.csv")
head(politeness)
str(politeness)
which(is.na(politeness)==T)
summary(politeness)
boxplot(frequency ~ attitude*gender,
col=c("white","lightgray"),politeness)
lmer(frequency ~ attitude, data=politeness)
politeness.model = lmer(frequency ~ attitude +
(1|subject) + (1|scenario), data=politeness)
politeness.model
politeness.model = lmer(frequency ~ attitude +
gender + (1|subject) +
(1|scenario), data=politeness)
politeness.model
summary(politeness.model)
politeness.null = lmer(frequency ~ gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
politeness.model = lmer(frequency ~ attitude +
gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
anova(politeness.null,politeness.model)
politeness.int = lmer(frequency ~ attitude +
gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
politeness.int = lmer(frequency ~ attitude +
gender + attitude*gender +
(1|subject) + (1|scenario), data=politeness,
REML=FALSE)
anova(politeness.model,politeness.int)
coef(politeness.model)
coef(politeness.int)
coef(politeness.model)
head(politeness)
politeness.slopes = lmer(frequency ~ attitude +
gender + (1+attitude|subject) +
(1+attitude|scenario),
data=politeness,
REML=FALSE)
coef(politeness.slopes)
devtools::install_github("56north/NutrientData")
install(devtools)
install.packages("devtools")
devtools::install_github("56north/NutrientData")
library(NutrientData)
library(dplyr)
data("ABBREV") # Load the data
ABBREV %>% # Select the data
arrange(-Energ_Kcal) %>% # Sort by calories per 100 g
select(Food = Shrt_Desc, Calories = Energ_Kcal) %>% # Select relevant columns
slice(1:20) %>% # Choose the top 20
ç
data("ABBREV") # Load the data
ABBREV %>% # Select the data
v
ABBREV %>% # Select the data
arrange(-Energ_Kcal) %>% # Sort by calories per 100 g
select(Food = Shrt_Desc, Calories = Energ_Kcal) %>% # Select relevant columns
slice(1:20) %>% # Choose the top 20
install.packages(dplyr)
install.packages("dplyr")
data("ABBREV") # Load the data
ABBREV %>% # Select the data
arrange(-Energ_Kcal) %>% # Sort by calories per 100 g
select(Food = Shrt_Desc, Calories = Energ_Kcal) %>% # Select relevant columns
slice(1:20) %>% # Choose the top 20
data("ABBREV") # Load the data
library(dplyr)
ABBREV %>% # Select the data
arrange(-Energ_Kcal) %>% # Sort by calories per 100 g
select(Food = Shrt_Desc, Calories = Energ_Kcal) %>% # Select relevant columns
slice(1:20) %>% # Choose the top 20
ABBREV %>%
arrange(-Energ_Kcal) %>%
select(Food = Shrt_Desc, Calories = Energ_Kcal) %>%
slice(1:20)
search_ingredient("onion,raw")
install.packages("stringr")
search_ingredient("onion,raw")
ingredients <- c("CABBAGE,RAW", "MAYONNAISE,RED FAT,W/ OLIVE OIL", "ONIONS,RAW")
grams <- c(100, 20, 10)
calculate_nutrients(ingredients, grams) %>%
select(Food = 1, Calories = 3, Protein = 4,
Fat = 5, Carbs = 7)
calculate_nutrients(ingredients, grams)
head(ABBREV)
ABBREV.Shrt_Desc
ABBREV$Shrt_Desc
arrange(ABBREV$Shrt_Desc)
sort(ABBREV$Shrt_Desc)
calculate_nutrients(ingredients, grams) %>%
select(Food = 1, Calories = 3, Protein = 4,
Fat = 5, Carbs = 7)
install("wordbankr")
install.packages("wordbankr")
library(wordbankr)
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
theme_set(theme_mikabr())
font <- theme_mikabr()$text$family
mode <- "local"
install.packages("langcog")
install.packages("devtools")
devtools::install_github("langcog/langcog")
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
install.packages("ggplot2")
library(ggplot2)
library(wordbankr)
#install.packages("devtools")
#devtools::install_github("langcog/langcog")
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
install.packages("directlabels")
library(directlabels)
theme_set(theme_mikabr())
font <- theme_mikabr()$text$family
mode <- "local"
vocab_admins <- get_administration_data(mode = mode) %>%
select(data_id, language, form, age, sex, production) %>%
filter(form == "WS", !is.na(sex))
vocab_admins <- get_administration_data(mode = mode)
vocab_admins <- get_administration_data()
vocab_admins <- get_administration_data() %>%
select(data_id, language, form, age, sex, production) %>%
filter(form == "WS", !is.na(sex))
head(vocab_admins)
library(wordbankr)
#install.packages("devtools")
#devtools::install_github("langcog/langcog")
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
theme_set(theme_mikabr())
font <- theme_mikabr()$text$family
#mode <- "local" #don't want this because we are *not* accessing wordbank from a local, Stanford machine!
all_vocab_admins <- get_administration_data()
subsetted_vocab_admins <- get_administration_data() %>%
select(data_id, language, form, age, sex, production) %>%
filter(form == "WS", !is.na(sex))
#vocab_admins <- get_administration_data(mode = mode) %>%
#  select(data_id, language, form, age, sex, production) %>%
#  filter(form == "WS", !is.na(sex))
head(all_vocab_admins)
str(all_vocab_admins)
num_words <- get_item_data() %>%
filter(form == "WS", type == "word") %>%
group_by(language) %>%
summarise(n = n())
library(wordbankr)
#install.packages("devtools")
#devtools::install_github("langcog/langcog")
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
theme_set(theme_mikabr())
font <- theme_mikabr()$text$family
#mode <- "local" #don't want this because we are *not* accessing wordbank from a local, Stanford machine!
#all_vocab_admins <- get_administration_data()
vocab_admins <- get_administration_data() %>%
select(data_id, language, form, age, sex, production) %>%
filter(form == "WS", !is.na(sex))
#vocab_admins <- get_administration_data(mode = mode) %>%
#  select(data_id, language, form, age, sex, production) %>%
#  filter(form == "WS", !is.na(sex))
num_words <- get_item_data() %>%
filter(form == "WS", type == "word") %>%
group_by(language) %>%
summarise(n = n())
vocab_data <- vocab_admins %>%
left_join(num_words) %>%
mutate(production = as.numeric(production) / n) %>%
group_by(language, sex, age) %>%
summarise(median = median(production))
ggplot(filter(vocab_data, language != "Hebrew"),
aes(x = age, y = median, colour = sex, label = sex)) +
facet_wrap(~language) +
geom_line(size = 1) +
scale_colour_solarized() +
scale_x_continuous(breaks = seq(min(vocab_data$age), max(vocab_data$age), 2),
limits = c(min(vocab_data$age), max(vocab_data$age) + 1),
name = "\nAge (months)") +
scale_y_continuous(name = "Median Productive Vocabulary (proportion of total words)\n",
limits = c(0, 1)) +
theme(legend.position = "none") +
geom_dl(method = list(dl.trans(x = x + 0.2), "last.qp", cex = 1, fontfamily = font))
head(vocab_data)
ggplot(filter(vocab_data, language != "Hebrew"),
aes(x = age, y = median, colour = sex, label = sex)) +
facet_wrap(~language) +
geom_line(size = 1) +
scale_colour_solarized() +
scale_x_continuous(breaks = seq(min(vocab_data$age), max(vocab_data$age), 2),
limits = c(min(vocab_data$age), max(vocab_data$age) + 1),
name = "\nAge (months)") +
scale_y_continuous(name = "Median Productive Vocabulary (proportion of total words)\n",
limits = c(0, 1)) +
theme(legend.position = "none") +
geom_dl(method = list(dl.trans(x = x + 0.2), "last.qp", cex = 1, fontfamily = font))
warnings()
all_num_words <- get_item_data()
head(all_num_words)
str(all_num_words)
head(num_words)
num_words
getwd()
setwd("~/uconn_jterm_python_workshops/python-data-analysis")
all_languages_and_forms_item_data <- get_item_data()
write.csv(all_languages_and_forms_item_data,'all_languages_and_forms_item_data.csv')
setwd("~/uconn_jterm_python_workshops/python-data-analysis/wordbank-data/")
library(wordbankr)
#install.packages("devtools")
#devtools::install_github("langcog/langcog")
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
theme_set(theme_mikabr())
font <- theme_mikabr()$text$family
#mode <- "local" #don't want this because we are *not* accessing wordbank from a local, Stanford machine!
#all_vocab_admins <- get_administration_data()
#vocab_admins <- get_administration_data() %>%
#  select(data_id, language, form, age, sex, production) %>%
#  filter(form == "WS", !is.na(sex))
#vocab_admins <- get_administration_data(mode = mode) %>%
#  select(data_id, language, form, age, sex, production) %>%
#  filter(form == "WS", !is.na(sex))
all_languages_and_forms_item_data <- get_item_data()
write.csv(all_languages_and_forms_item_data,'all_languages_and_forms_item_data.csv')
vocab_data
num_words
test <- vocab_admins %>%
left_join(num_words)
test
vocab_data
setwd("~/uconn_jterm_python_workshops/python-data-analysis/wordbank-data/")
library(wordbankr)
#install.packages("devtools")
#devtools::install_github("langcog/langcog")
library(langcog)
library(dplyr)
library(ggplot2)
library(directlabels)
theme_set(theme_mikabr())
font <- theme_mikabr()$text$family
#mode <- "local" #don't want this because we are *not* accessing wordbank from a local, Stanford machine!
#all_vocab_admins <- get_administration_data()
#vocab_admins <- get_administration_data() %>%
#  select(data_id, language, form, age, sex, production) %>%
#  filter(form == "WS", !is.na(sex))
#vocab_admins <- get_administration_data(mode = mode) %>%
#  select(data_id, language, form, age, sex, production) %>%
#  filter(form == "WS", !is.na(sex))
all_languages_and_forms_item_data <- get_item_data()
write.csv(all_languages_and_forms_item_data,'all_languages_and_forms_item_data.csv')
# num_words <- get_item_data() %>%
#   filter(form == "WS", type == "word") %>%
#   group_by(language) %>%
#   summarise(n = n())
#
# vocab_data <- vocab_admins %>%
#   left_join(num_words) %>%
#   mutate(production = as.numeric(production) / n) %>%
#   group_by(language, sex, age) %>%
#   summarise(median = median(production))
# ggplot(filter(vocab_data, language != "Hebrew"),
#        aes(x = age, y = median, colour = sex, label = sex)) +
#   facet_wrap(~language) +
#   geom_line(size = 1) +
#   scale_colour_solarized() +
#   scale_x_continuous(breaks = seq(min(vocab_data$age), max(vocab_data$age), 2),
#                      limits = c(min(vocab_data$age), max(vocab_data$age) + 1),
#                      name = "\nAge (months)") +
#   scale_y_continuous(name = "Median Productive Vocabulary (proportion of total words)\n",
#                      limits = c(0, 1)) +
#   theme(legend.position = "none") +
#   geom_dl(method = list(dl.trans(x = x + 0.2), "last.qp", cex = 1, fontfamily = font))
head(all_languages_and_forms_item_data)
